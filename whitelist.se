inset('MacroLib/common.sem')

macro MAXID: 0x100000000000000000000000

macro check_sender($id):
    IF_NOT_EQ(sload($id), msg.sender, THROW())

macro check_id_bounds($id):
    IF_ZERO(~lt($id, MAXID), THROW())
    IF_ZERO($id, THROW())

macro make_key($id, $address):
    LSHIFT160($id) | $address


def any():
    IF_NOT_ZERO(msg.value, THROW())


event WhitelistCreated(ID: indexed, creator: indexed)
def create():
    with sender = msg.sender:
        with count = sload(0) + 1:
            sstore(0, count)
            sstore(count, sender)
            log(type=WhitelistCreated, count, sender)
            return(count: uint96)


def count():
    return(sload(0): uint96)


event OwnerChanged(ID: indexed, newOwner: indexed, oldOwner: indexed)
def changeOwner(whitelistID: uint96, newOwner: address):
    check_id_bounds(whitelistID)
    check_sender(whitelistID)
    sstore(whitelistID, newOwner)
    log(type=OwnerChanged, whitelistID, newOwner, msg.sender)
    return(True: bool)


def getOwner(whitelistID: uint96):
    check_id_bounds(whitelistID)
    return(sload(whitelistID): address)


event AddressAdded(ID: indexed, address: indexed)
def addAddress(whitelistID: uint96, address: address):
    check_id_bounds(whitelistID)
    check_sender(whitelistID)
    with key = make_key(whitelistID, address):
        sstore(key, 1)
        log(type=AddressAdded, whitelistID, address)
        return(True: bool)


def check(whitelistID: uint96, address: address):
    check_id_bounds(whitelistID)
    with key = make_key(whitelistID, address):
        return(sload(key): bool)


event AddressRemoved(ID: indexed, address: indexed)
def removeAddress(whitelistID: uint96, address: address):
    check_id_bounds(whitelistID)
    check_sender(whitelistID)
    with key = make_key(whitelistID, address):
        sstore(key, 0)
        log(type=AddressRemoved, whitelistID, address)
        return(True: bool)